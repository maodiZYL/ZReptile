package main

import (
	"crypto/tls"
	"database/sql"
	"encoding/json"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"golang.org/x/net/proxy"
	_ "golang.org/x/net/proxy"
	"io/ioutil"
	"net/http"
)

type AutoGenerated struct {
	Data struct {
		FansList []struct {
			UID      string `json:"uid"`
			Nickname string `json:"nickname"`
		} `json:"fans_list"`
	} `json:"data"`
}

func getname(i int, sign string) {
	//sign :="d49ae6ff5afc3a87be478f2175b409a0"
	url := fmt.Sprintf("https://open.lmbang.com/user-fans/index?v=4&mvc=1&uid=1&p=%v&sign=%v", i, sign)
	//client := &http.Client{}       //导入请求的包

	//创建代理
	auth := proxy.Auth{
		User:     "itemb123",
		Password: "kIl8Jl3aKej",
	}
	address := fmt.Sprintf("%s:%s", "101.133.153.21", "9999")
	dialer, err := proxy.SOCKS5("tcp", address, &auth, proxy.Direct)
	if err != nil {
		return
	}

	req, _ := http.NewRequest("GET", url, nil) //开始请求
	//req.Header.Add("User-Agent","zidingyi")  //自定义表头
	req.Header.Set("Cookie", "LMB_AUTH_CODE=3da2ae424bf460aba6a2b4f8d8640d94; t_skey=3da2ae424bf460aba6a2b4f8d8640d94; __TOKEN_NEW=SESS_09c8bJoxuQHWDpIzcaUQaeLu%2BHs%2FF%2F93Sw4OCU5CIX4jgMrfITEpqihcyoYwtQgWFrqrLaNahEZ5GSqOprd3%2Byf3J2cYP0MKf5rqJiNZlfWOeo6w%2BSYaAg")
	req.Header.Set("Host", "open.lmbang.com")

	//使用代理
	var resp *http.Response
	httpTransport := &http.Transport{
		//跳过证书验证
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	httpClient := &http.Client{Transport: httpTransport}
	if dialer != nil {
		httpTransport.Dial = dialer.Dial
	}
	resp, err = httpClient.Do(req)
	if err != nil {
		fmt.Println(err)
	}
	//resp, _ := client.Do(req)   //处理请求
	defer resp.Body.Close()                //关闭
	body, err := ioutil.ReadAll(resp.Body) //读取响应,,,,,,,,,,,,,,,无响应代理出了问题
	if err != nil {
		fmt.Println(err)
	}
	var tem AutoGenerated      //用结构体
	json.Unmarshal(body, &tem) //将查到的数据放到结构体中
	save(tem)                  //调用save1
}

func main() {
	sign := "d49ae6ff5afc3a87be478f2175b409a0"
	for i := 1; i <= 2; i++ {
		getname(i, sign)
	}
}

func save(userlist2 AutoGenerated) {
	db, err := sql.Open("mysql", "root:haosql@tcp(127.0.0.1:3306)/test?charset=utf8") //链接数据库
	if err != nil {
		fmt.Printf("open error")
	} else {
		fmt.Printf("open success\n")
	}
	stmt, err := db.Prepare("INSERT re (mane_id,name) values (?,?)") //插入语句   字段不能填错
	if err != nil {
		fmt.Printf(err.Error())
	}
	for i := 0; i < len(userlist2.Data.FansList); i++ { //循环插入
		_, err := stmt.Exec(userlist2.Data.FansList[i].UID, userlist2.Data.FansList[i].Nickname) //执行数据存储
		if err != nil {
			continue
		}
		fmt.Println(userlist2.Data.FansList[i].UID, userlist2.Data.FansList[i].Nickname)
	}
	db.Close()
}
